{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sonjong-il/Desktop/wecode/my-first-next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sonjong-il/Desktop/wecode/my-first-next/pages/ssr-test.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport axios from 'axios';\nimport React from 'react';\nimport Layout from '../components/Layout'; // 외부에서 데이터 가져오기\n// next.js에서는 이 부분을 클래스형 컴포넌트에 getInitialProps 라는 메소드를 설정하여 해결합니다.\n// 이 메소드가 서버 사이드에서도 실행될 수 있고, 클라이언트 사이드에서도 실행될 수 있습니다.\n// 심지어 필요에 따라 prefetch도 될 수 있습니다.\n\nvar SSRTest = /*#__PURE__*/function (_React$Component) {\n  _inherits(SSRTest, _React$Component);\n\n  var _super = _createSuper(SSRTest);\n\n  function SSRTest() {\n    _classCallCheck(this, SSRTest);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SSRTest, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var users = this.props.users;\n      var userList = users.map(function (usre) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user.username\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 7\n        }, _this);\n      });\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: userList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this);\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return axios.get('https://jsonplaceholder.typicode.com/users');\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", {\n                  users: response.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return SSRTest;\n}(React.Component);\n\nexport default SSRTest;","map":{"version":3,"sources":["/Users/sonjong-il/Desktop/wecode/my-first-next/pages/ssr-test.js"],"names":["axios","React","Layout","SSRTest","users","props","userList","map","usre","user","username","id","req","get","response","data","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;AACA;AACA;AACA;;IAEMC,O;;;;;;;;;;;;;6BAUK;AAAA;;AAAA,UACCC,KADD,GACW,KAAKC,KADhB,CACCD,KADD;AAGP,UAAME,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD;AAAA,4BACzB;AAAA,oBAAmBC,IAAI,CAACC;AAAxB,WAASD,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA,iBADyB;AAAA,OAAV,CAAjB;AAGA,0BACE,QAAC,MAAD;AAAA,+BACE;AAAA,oBAAKL;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;;;;;;;;;AApB8BM,gBAAAA,G,QAAAA,G;;uBACNZ,KAAK,CAACa,GAAN,CACrB,4CADqB,C;;;AAAjBC,gBAAAA,Q;iDAGC;AACLV,kBAAAA,KAAK,EAAEU,QAAQ,CAACC;AADX,iB;;;;;;;;;;;;;;;;;;;EALWd,KAAK,CAACe,S;;AAwB5B,eAAeb,OAAf","sourcesContent":["import axios from 'axios';\nimport React from 'react';\nimport Layout from '../components/Layout';\n\n// 외부에서 데이터 가져오기\n// next.js에서는 이 부분을 클래스형 컴포넌트에 getInitialProps 라는 메소드를 설정하여 해결합니다.\n// 이 메소드가 서버 사이드에서도 실행될 수 있고, 클라이언트 사이드에서도 실행될 수 있습니다.\n// 심지어 필요에 따라 prefetch도 될 수 있습니다.\n\nclass SSRTest extends React.Component {\n  static async getInitialProps({ req }) {\n    const response = await axios.get(\n      'https://jsonplaceholder.typicode.com/users'\n    );\n    return {\n      users: response.data,\n    };\n  }\n\n  render() {\n    const { users } = this.props;\n\n    const userList = users.map((usre) => (\n      <li key={user.id}>{user.username}</li>\n    ));\n    return (\n      <Layout>\n        <ul>{userList}</ul>\n      </Layout>\n    );\n  }\n}\n\nexport default SSRTest;\n"]},"metadata":{},"sourceType":"module"}